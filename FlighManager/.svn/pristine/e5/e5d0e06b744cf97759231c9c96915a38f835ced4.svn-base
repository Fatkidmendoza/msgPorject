package edu.msg.flightmanager.backend.repository.bean;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.PersistenceException;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;

import edu.msg.flightmanager.backend.model.AbstractModel;
import edu.msg.flightmanager.backend.repository.BaseRepository;
import edu.msg.flightmanager.backend.repository.RepositoryException;

public class BaseRepositoryBean<M extends AbstractModel, I> implements BaseRepository<M, I> {

	@PersistenceContext(unitName = "flight_manager")
	protected EntityManager entityManager;

	private Class<M> entityClass;

	public BaseRepositoryBean(Class<M> entityClass) {
		this.entityClass = entityClass;
	}

	@Override
	public List<M> getAll() throws RepositoryException {
		try {
			CriteriaBuilder cb = entityManager.getCriteriaBuilder();
			CriteriaQuery<M> cq = cb.createQuery(entityClass);
			Root<M> root = cq.from(entityClass);
			CriteriaQuery<M> allEntities = cq.select(root);
			TypedQuery<M> tq = entityManager.createQuery(allEntities);
			return tq.getResultList();
		} catch (PersistenceException ex) {
			throw new RepositoryException(ex);
		}

	}

	@Override
	public M insert(M model) throws RepositoryException {
		try {
			entityManager.persist(model);
			entityManager.flush();
			return model;
		} catch (PersistenceException e) {
			throw new RepositoryException(e);
		}
	}

	@Override
	public M update(M model) throws RepositoryException {
		try {
			model = entityManager.merge(model);
			entityManager.flush();
			return model;
		} catch (PersistenceException e) {
			throw new RepositoryException(e);
		}

	}

	@Override
	public void delete(M model) throws RepositoryException {
		try {
			entityManager.remove(model);
		} catch (PersistenceException e) {
			throw new RepositoryException(e);
		}
	}

	@Override
	public M getById(I id) throws RepositoryException {
		try {
			return entityManager.find(entityClass, id);
		} catch (PersistenceException e) {
			throw new RepositoryException(e);
		}
	}

}
