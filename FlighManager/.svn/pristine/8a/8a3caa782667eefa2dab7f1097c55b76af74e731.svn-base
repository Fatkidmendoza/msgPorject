package edu.msg.flightmanager.beans;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;

import edu.msg.flightmanager.backend.dto.AirportDto;
import edu.msg.flightmanager.backend.dto.CompanyDto;
import edu.msg.flightmanager.backend.dto.PlaneDto;
import edu.msg.flightmanager.backend.dto.UserDto;
import edu.msg.flightmanager.backend.model.Company;
import edu.msg.flightmanager.backend.service.CompanyService;
import edu.msg.flightmanager.backend.service.ServiceException;

@ManagedBean
@ViewScoped
public class CompaniesBean implements Serializable {

	private static final long serialVersionUID = -2644003918788450237L;

	@EJB
	private CompanyService companyService;

	//used for get all in order to load the planes, airports and users
	private CompanyDto selectedCompany;

	//user for insert
	private CompanyDto companyToInsert = new CompanyDto();
	private List<AirportDto> selectedAirports;

	//used for update
	private CompanyDto companyToUpdate;

	public List<CompanyDto> getAllCompanies() {
		return companyService.getAll();
	}

	public void deleteCompany(Company company) {

	}

	public List<PlaneDto> getSelectedCompanyPlanes() {
		if(selectedCompany != null) {
			return selectedCompany.getPlanes();
		} else {
			return new ArrayList<>();
		}
	}

	public List<AirportDto> getSelectedCompanyAirports() {
		if(selectedCompany != null) {
			return selectedCompany.getAirports();
		} else {
			return new ArrayList<>();
		}
	}

	public List<UserDto> getSelectedCompanyUsers() {
		if(selectedCompany != null) {
			return selectedCompany.getEmployees();
		} else {
			return new ArrayList<>();
		}
	}

	public void selectAction(CompanyDto company) {
		selectedCompany = company;
	}

	public String addCompany() {
		companyToInsert.setEmployees(new ArrayList<>());
		companyToInsert.setPlanes(new ArrayList<>());
		companyToInsert.setAirports(selectedAirports);
		try {
			companyService.insert(companyToInsert);
			companyToInsert = new CompanyDto();
			setSelectedAirports(new ArrayList<>());
			FacesMessage errorMessage = new FacesMessage(FacesMessage.SEVERITY_INFO, "Insert Successful.",
					"The company was inserted.");
			FacesContext.getCurrentInstance().addMessage(null, errorMessage);
		} catch (ServiceException e){
			FacesMessage errorMessage = new FacesMessage(FacesMessage.SEVERITY_ERROR, "Insert Failed.",
					"The company was not inserted.");
			FacesContext.getCurrentInstance().addMessage(null, errorMessage);
			return "addCompany";
		}
		return "addCompany";
	}

	public CompanyDto getCompanyToInsert() {
		return companyToInsert;
	}

	public void setCompanyToInsert(CompanyDto companyToInsert) {
		this.companyToInsert = companyToInsert;
	}

	public List<AirportDto> getSelectedAirports() {
		return selectedAirports;
	}

	public void setSelectedAirports(List<AirportDto> selectedAirports) {
		this.selectedAirports = selectedAirports;
	}

	public void updateCompany() {
		try {
			companyService.update(companyToUpdate);
			selectedCompany = new CompanyDto();
			FacesMessage errorMessage = new FacesMessage(FacesMessage.SEVERITY_INFO, "Update Successful.",
					"The company was updated.");
			FacesContext.getCurrentInstance().addMessage(null, errorMessage);
		} catch(ServiceException e) {
			FacesMessage errorMessage = new FacesMessage(FacesMessage.SEVERITY_ERROR, "Update Failed.",
					"The company was not updated.");
			FacesContext.getCurrentInstance().addMessage(null, errorMessage);
		}
	}

	public CompanyDto getCompanyToUpdate() {
		return companyToUpdate;
	}

	public void setCompanyToUpdate(CompanyDto companyToUpdate) {
		this.companyToUpdate = companyToUpdate;
	}

	public List<CompanyDto> getCompanyToUpdateAsList() {
		List<CompanyDto> companyToUpdateAsList = new ArrayList<>();
		companyToUpdateAsList.add(companyToUpdate);
		return companyToUpdateAsList;
	}

}
