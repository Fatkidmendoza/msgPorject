package edu.msg.flightmanager.backend.service.beans;

import java.util.ArrayList;
import java.util.List;

import javax.ejb.EJB;
import javax.ejb.Stateless;

import edu.msg.flightmanager.backend.assembler.AirportAssembler;
import edu.msg.flightmanager.backend.dto.AirportDto;
import edu.msg.flightmanager.backend.model.Airport;
import edu.msg.flightmanager.backend.repository.AirportRepository;
import edu.msg.flightmanager.backend.repository.RepositoryException;
import edu.msg.flightmanager.backend.service.AirportService;
import edu.msg.flightmanager.backend.service.ServiceException;
import edu.msg.flightmanager.backend.util.AirportValidator;
import edu.msg.flightmanager.backend.util.ValidationException;

@Stateless(name = "AirportService", mappedName = "ejb/AirportService")
public class AirportServiceBean implements AirportService {

	@EJB
	private AirportRepository airportRepository;

	@Override
	public List<AirportDto> getAll() throws ServiceException {
		try {
			List<AirportDto> airportsDto = new ArrayList<AirportDto>();
			for (Airport airport : airportRepository.getAll()) {
				airportsDto.add(AirportAssembler.modelToDto(airport));
			}
			return airportsDto;
		} catch (RepositoryException e) {
			throw new ServiceException("The airports selection failed");
		}
	}

	@Override
	public AirportDto insert(AirportDto airportDto) throws ServiceException {
		try {

			Airport airport = AirportAssembler.dtoToModel(airportDto);
			AirportValidator.validate(airport);
			airportRepository.insert(airport);
			return AirportAssembler.modelToDto(airport);
		} catch (ValidationException e) {
			throw new ServiceException(e.getMessage());
		} catch (RepositoryException e) {
			throw new ServiceException("Insert a new airport failed");
		}
	}

	@Override
	public void delete(AirportDto airportDto) throws ServiceException {
		try {
			Airport airport = AirportAssembler.dtoToModel(airportDto);
			airportRepository.delete(airport);
		} catch (RepositoryException e) {
			throw new ServiceException("Delete user failed");
		}

	}

	@Override
	public void activate(AirportDto airportDto) throws ServiceException {
		try {
			Airport airport = AirportAssembler.dtoToModel(airportDto);
			airportRepository.activate(airport);
		} catch (RepositoryException e) {
			throw new ServiceException(e.getMessage());
		}
	}

}
