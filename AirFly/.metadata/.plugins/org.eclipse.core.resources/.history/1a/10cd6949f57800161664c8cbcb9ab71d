package edu.msg.flightmanager.web.validators;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.RequestScoped;
import javax.faces.component.UIComponent;
import javax.faces.component.UIInput;
import javax.faces.context.FacesContext;
import javax.faces.validator.Validator;
import javax.faces.validator.ValidatorException;
import javax.servlet.http.HttpServletRequest;

import edu.msg.flightmanager.backend.assembler.UserAssembler;
import edu.msg.flightmanager.backend.dto.UserDto;
import edu.msg.flightmanager.backend.service.ServiceException;
import edu.msg.flightmanager.backend.service.UserService;
import edu.msg.flightmanager.web.util.Constants;

@ManagedBean
@RequestScoped
public class UserValidator implements Validator {

	@EJB
	private UserService userService;

	@Override
	public void validate(FacesContext context, UIComponent component, Object value) throws ValidatorException {
		UIInput passInput = (UIInput) component.getAttributes().get("pass");
		String password = passInput.getSubmittedValue().toString();
		// password = PasswordEncrypter.generateHashedPassword(password);
		String userName = value.toString();
		Pattern pattern = Pattern.compile(Constants.NAME_PATTERN, Pattern.CASE_INSENSITIVE);
		Matcher matcherInput = pattern.matcher(userName);
		boolean matchesNormalCharacter = matcherInput.find();

		FacesContext ctx = FacesContext.getCurrentInstance();
		HttpServletRequest servletRequest = (HttpServletRequest) ctx.getExternalContext().getRequest();
		// returns something like "/myapplication/home.faces"
		String fullURI = servletRequest.getRequestURI();

		if (fullURI.equals("http://localhost:8080/flightmanager-web/")) {
			
			
		} else {
			FacesMessage message = new FacesMessage("Username is  too short!");
			throw new ValidatorException(message);
		}

		if (userName.length() < 4) {
			FacesMessage message = new FacesMessage("Username is  too short!");
			throw new ValidatorException(message);
		} else if (matchesNormalCharacter) {
			FacesMessage message = new FacesMessage("Username contains special characters");
			throw new ValidatorException(message);
		} else {
			try {
				UserDto tempUser = UserAssembler.modelToDto(userService.getByUserName(userName));
				String tempPassword = tempUser.getPassword();
				if (!tempPassword.equals(password)) {
					FacesMessage message = new FacesMessage("Wrong Password");
					throw new ValidatorException(message);
				}
			} catch (ServiceException e) {
				FacesMessage message = new FacesMessage("User not found");
				throw new ValidatorException(message);
			}
		}
	}

}
