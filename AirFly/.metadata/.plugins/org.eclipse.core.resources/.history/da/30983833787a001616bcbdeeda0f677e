package edu.msg.flightmanager.web.validators;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.faces.application.FacesMessage;
import javax.faces.component.UIComponent;
import javax.faces.component.UIInput;
import javax.faces.context.FacesContext;
import javax.faces.validator.FacesValidator;
import javax.faces.validator.Validator;
import javax.faces.validator.ValidatorException;

import edu.msg.flightmanager.backend.dto.UserDto;
import edu.msg.flightmanager.web.beans.UsersBean;

@FacesValidator("detailsPasswordValidator")
public class DatailsPasswordValidator implements Validator {

	private static final String PASSWORD_PATTERN = "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=\\S+$).{6,}$";

	private UserDto userInSession = UsersBean.userInSession();

	@Override
	public void validate(FacesContext facesContext, UIComponent uiComponent, Object value) throws ValidatorException {
		String password = value.toString();
	    password = PasswordEncrypter.generateHashedPassword(password);
		UIInput newPassInput = (UIInput) uiComponent.getAttributes().get("newPassword");
		UIInput chckPassInput = (UIInput) uiComponent.getAttributes().get("chckPassword");
		String newPass = newPassInput.getSubmittedValue().toString();
		String confPass = chckPassInput.getSubmittedValue().toString();

		if (password.isEmpty() || password == null) {
			FacesMessage message = new FacesMessage("Enter your password");
			throw new ValidatorException(message);
		} else if (!password.equals(userInSession.getPassword())) {
			FacesMessage message = new FacesMessage(
					"Not Permitted! You do not have permission to access the requested page!");
			throw new ValidatorException(message);
		} else if (!newPass.equals(confPass)) {
			FacesMessage message = new FacesMessage("Passwords must match ");
			throw new ValidatorException(message);
		} else if (newPass.isEmpty() || newPass == null) {
			FacesMessage message = new FacesMessage("Your new password contains special characters");
			throw new ValidatorException(message);
		} else if (!matchesPattern(newPass)) {
			FacesMessage message = new FacesMessage("Invalid password, valid example: Example159");
			throw new ValidatorException(message);
		}

	}

	private boolean matchesPattern(String password) {
		Pattern pattern = Pattern.compile(PASSWORD_PATTERN);
		Matcher matcherInput = pattern.matcher(password);
		return matcherInput.find();
	}
}
